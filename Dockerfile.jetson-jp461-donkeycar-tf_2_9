########################################
# Docker build
########################################
#time sudo docker build -t naisy/jetson-jp461-donkeycar -f Dockerfile.jetson-jp461-donkeycar .
#time sudo docker build -t heavy02011/jetson-jp461-donkeycar_tf_2_9 -f Dockerfile.jetson-jp461-donkeycar-tf_2_9 .

########################################
# Storage setting
########################################
#sudo service docker stop
#cd /var/run
#sudo mv docker /mnt/ssd250
#sudo ln -s /mnt/ssd250 docker
#sudo service docker start

# https://github.com/NVIDIA/nvidia-docker/issues/1033
# cmake fails unable to find cuda library while building an image
#vi /etc/docker/daemon.json
#{
#    "runtimes": {
#        "nvidia": {
#            "path": "/usr/bin/nvidia-container-runtime",
#            "runtimeArgs": []
#        }
#    },
#    "default-runtime": "nvidia"
#}
#
#service docker stop
#service docker start


# end of information


########################################
# Base OS repository
########################################
# ARG BASE_IMAGE=naisy/jetson-jp461-deepstream601-triton-base
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-ml:r32.7.1-py3
FROM ${BASE_IMAGE}

ARG USERNAME=jetson
RUN useradd -ms /bin/bash $USERNAME
# USER $USERNAME

ARG OPENBLAS_CORETYPE=ARMV8
ARG VENV=python3


########################################
# DonkeyCar branch tf_2_9
########################################
# https://github.com/autorope/donkeydocs/blob/Update_to_tf_29/docs/guide/robot_sbc/setup_jetson_nano.md#installation-for-donkey-car-main

#----------------------------------------
# Step 1: Install mamba-forge
#----------------------------------------

# Set the working directory
WORKDIR /home/jetson

# # Download the Mambaforge installer
# RUN wget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-aarch64.sh

# # Make the installer executable
# RUN chmod u+x ./Mambaforge-Linux-aarch64.sh

# # Run the installer - '-b' flag to run in batch mode (non-interactive)
# RUN bash ./Mambaforge-Linux-aarch64.sh -b

# # Add conda to path for subsequent RUN commands in the Dockerfile
# ENV PATH="/root/miniforge3/bin:${PATH}"

# # Source bashrc for interactive shell
# SHELL ["/bin/bash", "--login", "-c"]

#----------------------------------------
# Step 2: Install git lfs
#----------------------------------------
RUN apt-get update && \
    apt-get install -y git git-lfs && \
    rm -rf /var/lib/apt/lists/*


#----------------------------------------
# Step 3: Download Donkey Car
#----------------------------------------

# Create the projects directory and set it as the working directory
WORKDIR /home/jetson/projects

# Clone the repositories
RUN git clone https://github.com/autorope/donkeycar
RUN git lfs clone https://github.com/autorope/jetson

# Switch to the donkeycar directory and checkout the main branch
WORKDIR /home/jetson/projects/donkeycar
RUN git checkout tf_2_9


#----------------------------------------
# Step 4: Create the python env and install donkey
#----------------------------------------

# Create a new environment from the provided environment file
# RUN mamba env create -f install/envs/jetson46.yml

# Activate the created environment and install packages
# Note: Each RUN instruction creates a new shell, so 'conda activate' will only apply for that instruction
# RUN /bin/bash -c "source miniforge3/bin/activate donkey && conda update pip"
# RUN /bin/bash -c "source miniforge3/bin/activate donkey && pip install -e .[nano]"
# RUN /bin/bash -c "source miniforge3/bin/activate donkey && pip install -U albumentations --no-binary qudida,albumentations"
# RUN /bin/bash -c "source miniforge3/bin/activate donkey && pip install git+https://github.com/autorope/keras-vis.git"
# RUN /bin/bash -c "source miniforge3/bin/activate donkey && pip install ../jetson/tensorflow-2.9.3-cp39-cp39-linux_aarch64.whl"
# RUN /bin/bash -c "conda update pip"

# Ensure up-to-date system packages
RUN apt-get update && apt-get upgrade -y && apt-get install -y software-properties-common

# Add Deadsnakes PPA to source list
RUN add-apt-repository ppa:deadsnakes/ppa

# Install Python 3.9
RUN apt-get update && apt-get install -y python3.9 python3.9-dev python3.9-distutils

# Update alternatives to use Python 3.9 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 1
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1

# Install Python 3.9 venv module
RUN apt-get install -y python3.9-venv

# Install pip for Python 3
RUN apt-get install -y python3-pip

# Upgrade pip
RUN python3.9 -m pip install --upgrade pip


# # Install pip for Python 3.9
# RUN apt-get install -y python3.9-venv python3.9-pip

# # Upgrade pip
# RUN python3.9 -m pip install --upgrade pip

# Install the project requirements
RUN python3.9 -m pip install -e .[nano]


RUN apt-get update && apt-get install -y python3-pip
RUN /bin/bash -c "pip3 install -e .[nano]"
RUN /bin/bash -c "pip3 install -U albumentations --no-binary qudida,albumentations"
RUN /bin/bash -c "pip3 install git+https://github.com/autorope/keras-vis.git"
RUN /bin/bash -c "pip3 install ../jetson/tensorflow-2.9.3-cp39-cp39-linux_aarch64.whl"

# Set permissions for gpiochip
# RUN chmod 666 /dev/gpiochip*
# docker run --device=/dev/gpiochip0:/dev/gpiochip0 your-docker-image



#----------------------------------------
# Step 5: Check the TF installation
#----------------------------------------
# skip here

#----------------------------------------
# Step 6: Install OpenCV
#----------------------------------------


# Install necessary libraries
RUN apt-get update && \
    echo '/usr/local/cuda/lib64' >> /etc/ld.so.conf.d/nvidia-tegra.conf && \
    ldconfig && \
    apt-get install -y \
        build-essential cmake git unzip pkg-config zlib1g-dev \
        libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev \
        libpng-dev libtiff-dev libglew-dev \
        libavcodec-dev libavformat-dev libswscale-dev \
        libgtk2.0-dev libgtk-3-dev libcanberra-gtk* \
        python-dev python-numpy python-pip \
        python3-dev python3-numpy python3-pip \
        libxvidcore-dev libx264-dev libgtk-3-dev \
        libtbb2 libtbb-dev libdc1394-22-dev libxine2-dev \
        gstreamer1.0-tools libgstreamer-plugins-base1.0-dev \
        libgstreamer-plugins-good1.0-dev \
        libv4l-dev v4l-utils v4l2ucp qv4l2 \
        libtesseract-dev libxine2-dev libpostproc-dev \
        libavresample-dev libvorbis-dev \
        libfaac-dev libmp3lame-dev libtheora-dev \
        libopencore-amrnb-dev libopencore-amrwb-dev \
        libopenblas-dev libatlas-base-dev libblas-dev \
        liblapack-dev liblapacke-dev libeigen3-dev gfortran \
        libhdf5-dev libprotobuf-dev protobuf-compiler \
        libgoogle-glog-dev libgflags-dev && \
    rm -rf /var/lib/apt/lists/*


# Install Qt5 for OpenCV GUI
RUN apt-get update && \
    apt-get install -y qt5-default && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /root

# Download the latest version of OpenCV and the contrib files
RUN apt-get update && apt-get install -y wget unzip && \
    wget -O opencv.zip https://github.com/opencv/opencv/archive/4.6.0.zip && \
    wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.6.0.zip && \
    # Unpack
    unzip opencv.zip && \
    unzip opencv_contrib.zip && \
    # Administration to make life easier later on
    mv opencv-4.6.0 opencv && \
    mv opencv_contrib-4.6.0 opencv_contrib && \
    # Clean up the zip files
    rm opencv.zip && \
    rm opencv_contrib.zip && \
    # Clean up the package manager
    apt-get remove -y wget unzip && \
    apt-get autoremove -y && \
    rm -rf /var/lib/apt/lists/*

# Set the working directory to ~/opencv
WORKDIR /root/opencv

# Create a new directory called build and navigate into it
RUN mkdir build
WORKDIR /root/opencv/build

# Run cmake tf_2_9 version
# RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
#       -D CMAKE_PREFIX_PATH="/root/mambaforge/envs/donkey/bin/python3.9" \
#       -D python=ON \
#       -D BUILD_opencv_python2=OFF \
#       -D BUILD_opencv_python3=ON \
#       -D CMAKE_INSTALL_PREFIX="/root/mambaforge/envs/donkey" \
#       -D OPENCV_EXTRA_MODULES_PATH="/root/opencv_contrib/modules" \
#       -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
#       -D WITH_OPENCL=OFF \
#       -D WITH_CUDA=ON \
#       -D CUDA_ARCH_BIN=5.3 \
#       -D CUDA_ARCH_PTX="" \
#       -D WITH_CUDNN=ON \
#       -D WITH_CUBLAS=ON \
#       -D ENABLE_FAST_MATH=ON \
#       -D CUDA_FAST_MATH=ON \
#       -D OPENCV_DNN_CUDA=ON \
#       -D ENABLE_NEON=ON \
#       -D WITH_QT=OFF \
#       -D WITH_OPENMP=ON \
#       -D BUILD_TIFF=ON \
#       -D WITH_FFMPEG=ON \
#       -D WITH_GSTREAMER=ON \
#       -D WITH_TBB=ON \
#       -D BUILD_TBB=ON \
#       -D BUILD_TESTS=OFF \
#       -D WITH_EIGEN=ON \
#       -D WITH_V4L=ON \
#       -D WITH_LIBV4L=ON \
#       -D OPENCV_ENABLE_NONFREE=ON \
#       -D INSTALL_C_EXAMPLES=OFF \
#       -D INSTALL_PYTHON_EXAMPLES=OFF \
#       -D PYTHON3_PACKAGES_PATH="/root/mambaforge/envs/donkey/lib/python3.9/site-packages" \
#       -D PYTHON3_LIBRARIES_PATH="/root/mambaforge/envs/donkey/lib" \
#       -D OPENCV_GENERATE_PKGCONFIG=ON \
#       -D BUILD_EXAMPLES=OFF ..

# original version
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D OPENCV_EXTRA_MODULES_PATH=/root/opencv_contrib/modules \
    -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
    -D WITH_OPENCL=OFF \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN=5.3 \
    -D CUDA_ARCH_PTX="" \
    -D WITH_CUDNN=ON \
    -D WITH_CUBLAS=ON \
    -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D ENABLE_NEON=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENMP=ON \
    -D BUILD_TIFF=ON \
    -D WITH_FFMPEG=ON \
    -D WITH_GSTREAMER=ON \
    -D WITH_TBB=ON \
    -D BUILD_TBB=ON \
    -D BUILD_TESTS=OFF \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_EXAMPLES=OFF ..


# Remove opencv2 directory, run make install, run ldconfig
RUN rm -r /usr/include/opencv4/opencv2 && \
    make install && \
    ldconfig

# Clean up
RUN make clean

# Update system packages
RUN apt-get update


# RUN adduser $USERNAME gpio
RUN adduser $USERNAME root


########################################
# TUM raceline
########################################

# RUN apt-get update && apt-get install -y git python3-pip
# RUN git clone https://github.com/TUMFTM/GraphBasedLocalTrajectoryPlanner.git \
#     && cd GraphBasedLocalTrajectoryPlanner \
#     && git checkout dependabot/pip/numpy-1.22.0 \
#     && pip3 install -r requirements.txt


########################################
# pip package
########################################
# RUN . /virtualenv/$VENV/bin/activate \
#     && pip install pyfiglet \
#     && pip install prettytable


# RUN . /virtualenv/$VENV/bin/activate \
#     && cd ~/github \
#     && git clone -b main https://github.com/autorope/donkeycar \
#     && cd donkeycar \
#     && pip install -e .[nano]

# RUN . /virtualenv/$VENV/bin/activate \
#     && cd ~/github \
#     && git clone https://github.com/tawnkramer/gym-donkeycar \
#     && cd gym-donkeycar \
#     && sed -i 's/python_requires=">=3\.7"/python_requires=">=3.6"/g' setup.py \
#     && pip install -e .


# RUN sudo sed -i 's/docker-/docker-donkeycar-/g' /root/.bashrc \
#     && sed -i 's/docker-/docker-donkeycar-/g' /home/$USERNAME/.bashrc


# CMD . /virtualenv/python3/bin/activate && exec bash -c "jupyter-lab --ip=0.0.0.0 --no-browser --ServerApp.root_dir=/ --LabApp.default_url=/lab?file-browser-path=$HOME/data/Notebooks"
USER $USERNAME

CMD exec bash